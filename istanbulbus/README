======================= ENGLISH ==================================

Istanbulbus will help finding optimal bus routes between a source and a
destination. For development, install Google App Engine for Python, then
on the command line

dev_appserver.py [DEV]/istanbulbus/app

Then you can point your browser to localhost:8080

Istanbulbus serves data to Ajax queries using data in PKL pickle files. These
files contain dictionaries, lists necessary about stops, routes and are
pre-processed forms of IETT data files. In order to better understand to what
data structures they correspond to, you can look into path_planning.pdf under
app/doc directory. Pre-processing is done using create.py. 

======================= TURKISH ==================================

Istanbulbus ile baslangic ve sonuc noktasi (duragi) arasindaki en iyi
hatlari bulup rapor etmeyi amacliyoruz. Uygulamayi gelistirmek icin 
Google App Engine Python indirin ve kurduktan sonra 

dev_appserver.py [DEV]/istanbulbus/app

ile gelistirme servisini baslatin. Test icin tarayicinizi localhost:8080 adresine 
gidebilirsiniz. 

Istanbul IETT durak ve hat verisini yazinin altindaki kaynaktan
indirebilirsiniz. Veri iki cesit, duz hat ve durak verisi, bir de Python pickle
halinde islenmis veri yapilarinin oldugu .pkl dosyalari. Duz veriyi kullanmaya
gerek yok, pickle dosyalari her seyi iceriyor. Pickle dosyalari create.py kodu
isletilerek olusturuluyor.

K fonksiyonu (verisi) x hatti uzerindeki y duraginin hattin basindan baslayarak
sayi olarak "kacinci" oldugunu rapor eder. SR cagrisi bir duraktan gecen hatlar,
routestops bir hattin ziyaret ettigi duraklardir.

Python cagrisi olarak bazi ornekler:

59N hattindaki L0168A duragi kacinci duraktir (cevap 4).

print K(k, '59N', 'L0168A')

Durak detaylari

print duraklar['L0139J']

Bir hattin gectigi duraklar

print routestops['59N']

Bir duraktan gecen hatlar

print sr['L0168A']

Ustteki cagrilarin hepsi test.py adli dosya icinde.

Bu veriler, veri yapilari kullanilarak iki nokta arasindaki en kisa seyahati
bulan kodlar yazilabilir. Hangi hatlara binilecegi, inilecegi gibi.. isin bu
kismi ilgilenen okuyuculara odev olsun. Ustteki makalede konu hakkinda guzel
detaylar var. Matematiksel olarak kombinatoryel matematik, grafik teorisi (graph
theory) gibi konular isin icine giriyor. Tek transfer, iki transfer,
vs. hesaplari ayri ayri yapiliyor.

Durak kodlari ayni sayi ama sonunda 'A' ve 'B' gibi eklerle yolun karsilikli
taraflarinda, ayni hat uzerinde ama ters yonlere gidecek sekilde
konumlandirilmis olabiliyor. Bunu niye soyluyoruz? Eger bir uygulama durak
ismini aratarak (mesela "levent" gibi) durak kodu almayi, ve oradan seyahat
planlama yapmayi dusunuyorsa birden fazla durak koduyla is yapmaya hazir
olmali. Istanbulbus kullanicidan durak ismi aldigi icin biz bunu goz onune
almaliydik.

